services:
  # API Gateway (Spring Boot)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVICES_DOCUMENT_SERVICE_URL=http://document-service:8000
      - SERVICES_EXTRACTION_AGENT_URL=http://extraction-agent:8001
      - SERVICES_SEARCH_AGENT_URL=http://search-agent:8002
      - SERVICES_GENERATION_AGENT_URL=http://generation-agent:8003
      - SERVICES_ORCHESTRATION_SERVICE_URL=http://orchestration-agent:8005
    networks:
      - app-network
    depends_on:
      document-service:
        condition: service_healthy
      search-agent:
        condition: service_healthy
      generation-agent:
        condition: service_healthy
    healthcheck:
      test:
        ['CMD', 'wget', '--spider', '-q', 'http://localhost:8080/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Document Service (FastAPI/Python)
  document-service:
    build:
      context: ./document-service
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Search Agent (FastAPI/Python - Lightweight)
  search-agent:
    build:
      context: ./search-agent
      dockerfile: Dockerfile
    ports:
      - '8002:8002'
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8002/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Generation Agent (FastAPI/Python + Gemini - Lightweight)
  generation-agent:
    build:
      context: ./generation-agent
      dockerfile: Dockerfile
    ports:
      - '8003:8003'
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DOCUMENT_SERVICE_URL=http://document-service:8000
    networks:
      - app-network
    depends_on:
      document-service:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8003/health']
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Orchestration Agent (FastAPI/Python + Gemini - AI Legal Assistant)
  orchestration-agent:
    build:
      context: ./orchestration-agent
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - DOCUMENT_SERVICE_URL=http://document-service:8000
      - EXTRACTION_AGENT_URL=http://orchestration-wrapper:8010
      - SEARCH_AGENT_URL=http://orchestration-wrapper:8010
      - GENERATION_AGENT_URL=http://orchestration-wrapper:8010
    ports:
      - '8005:8005'
    networks:
      - app-network
    depends_on:
      document-service:
        condition: service_healthy
      search-agent:
        condition: service_healthy
      generation-agent:
        condition: service_healthy
      orchestration-wrapper:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8005/health']
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s

  orchestration-wrapper:
    build:
      context: ./orchestration-wrapper
      dockerfile: Dockerfile
    ports:
      - '8010:8010'
    environment:
      - WRAPPER_PORT=8010
      - DOCUMENT_SERVICE_URL=http://document-service:8000
      - EXTRACTION_AGENT_URL=http://extraction-agent:8001
      - SEARCH_AGENT_URL=http://search-agent:8002
      - GENERATION_AGENT_URL=http://generation-agent:8003
      - ORCHESTRATION_AGENT_URL=http://orchestration-agent:8005
      - REQUEST_TIMEOUT_SECONDS=60
      - RETRY_ATTEMPTS=1
      - ALLOWED_ORIGINS=*
    healthcheck:
      test: ['CMD', 'curl', '-fsS', 'http://localhost:8010/health']
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks: [app-network]

  # Frontend (React/Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8080
    ports:
      - '3000:80'
    networks:
      - app-network
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    mem_limit: 2g
    cpus: 2
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80\']
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  document-data:
    driver: local
