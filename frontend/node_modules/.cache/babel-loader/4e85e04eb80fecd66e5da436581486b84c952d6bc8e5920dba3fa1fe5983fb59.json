{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';// Updated Supabase credentials\nconst supabaseUrl='https://sjfdkgzmjaasjtavuhfu.supabase.co';const supabaseAnonKey='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNqZmRrZ3ptamFhc2p0YXZ1aGZ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5NDUwNTIsImV4cCI6MjA1NzUyMTA1Mn0.dWBqYF31Ot73oXqf8v2KaMj37Tkzb3dd7Szq1WviDPA';// Replace with your actual key\n// JWT Configuration options\nconst supabaseOptions={auth:{autoRefreshToken:true,persistSession:true,detectSessionInUrl:true}};// Create and export the Supabase client with options\nexport const supabase=createClient(supabaseUrl,supabaseAnonKey,supabaseOptions);// Export the function to get the Supabase client\nexport const getSupabaseClient=()=>supabase;// Helper function to get JWT token from session\nexport const getAuthToken=async()=>{var _data$session;const{data,error}=await supabase.auth.getSession();if(error){console.error('Error retrieving auth session:',error);return null;}return(data===null||data===void 0?void 0:(_data$session=data.session)===null||_data$session===void 0?void 0:_data$session.access_token)||null;};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabaseOptions","auth","autoRefreshToken","persistSession","detectSessionInUrl","supabase","getSupabaseClient","getAuthToken","_data$session","data","error","getSession","console","session","access_token"],"sources":["/Users/stefano/Desktop/LexygraphLab/frontend/src/config/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Updated Supabase credentials\nconst supabaseUrl = 'https://sjfdkgzmjaasjtavuhfu.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNqZmRrZ3ptamFhc2p0YXZ1aGZ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5NDUwNTIsImV4cCI6MjA1NzUyMTA1Mn0.dWBqYF31Ot73oXqf8v2KaMj37Tkzb3dd7Szq1WviDPA'; // Replace with your actual key\n\n// JWT Configuration options\nconst supabaseOptions = {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n};\n\n// Create and export the Supabase client with options\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, supabaseOptions);\n\n// Export the function to get the Supabase client\nexport const getSupabaseClient = () => supabase;\n\n// Helper function to get JWT token from session\nexport const getAuthToken = async () => {\n  const { data, error } = await supabase.auth.getSession();\n  if (error) {\n    console.error('Error retrieving auth session:', error);\n    return null;\n  }\n  return data?.session?.access_token || null;\n};\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,uBAAuB,CAEpD;AACA,KAAM,CAAAC,WAAW,CAAG,0CAA0C,CAC9D,KAAM,CAAAC,eAAe,CAAG,kNAAkN,CAAE;AAE5O;AACA,KAAM,CAAAC,eAAe,CAAG,CACtBC,IAAI,CAAE,CACJC,gBAAgB,CAAE,IAAI,CACtBC,cAAc,CAAE,IAAI,CACpBC,kBAAkB,CAAE,IACtB,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAGR,YAAY,CAACC,WAAW,CAAEC,eAAe,CAAEC,eAAe,CAAC,CAEnF;AACA,MAAO,MAAM,CAAAM,iBAAiB,CAAGA,CAAA,GAAMD,QAAQ,CAE/C;AACA,MAAO,MAAM,CAAAE,YAAY,CAAG,KAAAA,CAAA,GAAY,KAAAC,aAAA,CACtC,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CAACJ,IAAI,CAACU,UAAU,CAAC,CAAC,CACxD,GAAID,KAAK,CAAE,CACTE,OAAO,CAACF,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,KAAI,CACb,CACA,MAAO,CAAAD,IAAI,SAAJA,IAAI,kBAAAD,aAAA,CAAJC,IAAI,CAAEI,OAAO,UAAAL,aAAA,iBAAbA,aAAA,CAAeM,YAAY,GAAI,IAAI,CAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}