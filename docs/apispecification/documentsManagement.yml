openapi: 3.0.3
info:
  title: Document Processing Service API
  description: API for document processing, extraction, summarization and management
  version: 1.0.0
servers:
  - url: https://api.lexygraphai.com/v1
tags:
  - name: collections
    description: Operations related to document collections
  - name: documents
    description: Operations related to document processing and management
  - name: extraction
    description: Operations related to content extraction from documents
  - name: processing
    description: Operations related to document processing status
paths:
  /documents/{documentId}/view-url:
    get:
      summary: Generate a pre-signed URL for viewing the document in browser
      operationId: getDocumentViewUrl
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: expiresIn
          in: query
          description: URL expiration time in seconds (default: 3600)
          schema:
            type: integer
            default: 3600
      responses:
        '200':
          description: Pre-signed URL for viewing the document
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                  expiresAt:
                    type: string
                    format: date-time

  /documents/{documentId}/download-url:
    get:
      summary: Generate a pre-signed URL for downloading the document
      operationId: getDocumentDownloadUrl
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: expiresIn
          in: query
          description: URL expiration time in seconds (default: 3600)
          schema:
            type: integer
            default: 3600
      responses:
        '200':
          description: Pre-signed URL for downloading the document
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                  filename:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time

  /collections:
    get:
      summary: List all collections for the authenticated user
      operationId: listCollections
      tags:
        - collections
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: A list of collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collection'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      summary: Create a new collection
      operationId: createCollection
      tags:
        - collections
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Work Documents"
                description:
                  type: string
                  example: "Documents related to work projects"
      responses:
        '201':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'

  /collections/{collectionId}:
    get:
      summary: Get collection details
      operationId: getCollection
      tags:
        - collections
      security:
        - bearerAuth: []
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    put:
      summary: Update a collection
      operationId: updateCollection
      tags:
        - collections
      security:
        - bearerAuth: []
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Collection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    delete:
      summary: Delete a collection
      operationId: deleteCollection
      tags:
        - collections
      security:
        - bearerAuth: []
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Collection deleted

  /collections/{collectionId}/documents:
    get:
      summary: List documents in a collection
      operationId: listCollectionDocuments
      tags:
        - collections
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, created_at, updated_at]
            default: created_at
        - name: direction
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of documents in the collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentMetadata'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /documents:
    post:
      summary: Upload and process a document
      operationId: uploadDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
                description:
                  type: string
                collectionId:
                  type: string
                  format: uuid
                  description: Collection to add the document to
                processingType:
                  type: string
                  enum: [TEXT, TABLE, IMAGE, HANDWRITTEN, COMPLEX]
                  description: Type of document for specialized processing
                  default: TEXT
                processingOptions:
                  type: string
                  format: json
                  description: JSON string with additional processing options
                priority:
                  type: string
                  enum: [LOW, NORMAL, HIGH]
                  default: NORMAL
                language:
                  type: string
                  description: ISO 639-1 language code
                  default: en
      responses:
        '202':
          description: Document accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentSubmissionResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{documentId}:
    get:
      summary: Get document details
      operationId: getDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    put:
      summary: Update document metadata
      operationId: updateDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                collectionId:
                  type: string
                  format: uuid
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    delete:
      summary: Delete a document
      operationId: deleteDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Document deleted

  /documents/{documentId}/status:
    get:
      summary: Check document processing status
      operationId: getDocumentStatus
      tags:
        - documents
        - processing
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document processing status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingStatusResponse'

  /documents/{documentId}/extracted-text:
    get:
      summary: Get extracted text from document
      operationId: getDocumentExtractedText
      tags:
        - documents
        - extraction
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            description: Page number to retrieve (1-based)
        - name: format
          in: query
          schema:
            type: string
            enum: [plain, html, markdown]
            default: plain
      responses:
        '200':
          description: Extracted text content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractedTextResponse'
            text/plain:
              schema:
                type: string
            text/html:
              schema:
                type: string
            text/markdown:
              schema:
                type: string

  /documents/{documentId}/summary:
    get:
      summary: Get document summary
      operationId: getDocumentSummary
      tags:
        - documents
        - extraction
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: maxLength
          in: query
          schema:
            type: integer
            description: Maximum length of summary in characters
            default: 500
      responses:
        '200':
          description: Document summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryResponse'

  /documents/{documentId}/generate-summary:
    post:
      summary: Generate or refresh a document summary on-demand
      operationId: generateDocumentSummary
      tags:
        - documents
        - extraction
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                maxLength:
                  type: integer
                  description: Maximum length of summary in characters
                  default: 500
                forceRegenerate:
                  type: boolean
                  description: Force regeneration even if summary exists
                  default: false
      responses:
        '200':
          description: Generated summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryResponse'
        '202':
          description: Summary generation accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [ACCEPTED]
                  statusCheckUrl:
                    type: string
                    format: uri

  /documents/{documentId}/extract-entities:
    post:
      summary: Extract entities from document on-demand
      operationId: extractDocumentEntities
      tags:
        - documents
        - extraction
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                forceRegenerate:
                  type: boolean
                  description: Force regeneration even if entities exist
                  default: false
                entityTypes:
                  type: array
                  items:
                    type: string
                    enum: [PERSON, ORGANIZATION, LOCATION, DATE, PRODUCT, EVENT]
                  description: Specific entity types to extract (all if omitted)
      responses:
        '200':
          description: Extracted entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesResponse'
        '202':
          description: Entity extraction accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [ACCEPTED]
                  statusCheckUrl:
                    type: string
                    format: uri

  /documents/{documentId}/entities:
    get:
      summary: Get entities extracted from document
      operationId: getDocumentEntities
      tags:
        - documents
        - extraction
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [PERSON, ORGANIZATION, LOCATION, DATE, PRODUCT, EVENT]
            style: form
            explode: false
      responses:
        '200':
          description: Extracted entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitiesResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        documentCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        thumbnailUrl:
          type: string
          format: uri
          description: Pre-signed URL for a representative thumbnail of the collection

    DocumentBatchResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentMetadata'
        pagination:
          $ref: '#/components/schemas/Pagination'

    DocumentSubmissionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [SUBMITTED, QUEUED]
        estimatedCompletionTime:
          type: string
          format: date-time
        statusCheckUrl:
          type: string
          format: uri
        collectionId:
          type: string
          format: uuid

    ProcessingStatusResponse:
      type: object
      properties:
        documentId:
          type: string
          format: uuid
        status:
          type: string
          enum: [QUEUED, PARSING, PROCESSING, OCR_PROCESSING, TEXT_EXTRACTION, SUMMARIZING, COMPLETED, FAILED]
        currentStep:
          type: string
        progress:
          type: integer
          minimum: 0
          maximum: 100
        estimatedCompletionTime:
          type: string
          format: date-time
        completedSteps:
          type: array
          items:
            type: string
        elapsedTime:
          type: integer
          description: Time elapsed in seconds
        error:
          type: string

    DocumentMetadata:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        size:
          type: integer
          description: Size in bytes
        mimeType:
          type: string
        status:
          type: string
          enum: [QUEUED, PROCESSING, COMPLETED, FAILED]
        processingType:
          type: string
          enum: [TEXT, TABLE, IMAGE, HANDWRITTEN, COMPLEX]
        collectionId:
          type: string
          format: uuid
        hasSummary:
          type: boolean
        hasEntities:
          type: boolean
        pageCount:
          type: integer
        thumbnailUrl:
          type: string
          format: uri
          description: Pre-signed URL for the document thumbnail
        viewUrl:
          type: string
          format: uri
          description: Pre-signed URL for viewing the document (expires after a short time)
        tags:
          type: array
          items:
            type: string
        originalFilename:
          type: string
          description: Original filename when uploaded

    Document:
      allOf:
        - $ref: '#/components/schemas/DocumentMetadata'
        - type: object
          properties:
            processingDetails:
              type: object
              properties:
                contentType:
                  type: string
                  enum: [TEXT, TABLE, IMAGE, MIXED]
                language:
                  type: string
                confidence:
                  type: number
                  format: float
                extractionMethod:
                  type: string
                  enum: [PARSER, OCR, HYBRID]
                processingTime:
                  type: integer
                  description: Processing time in milliseconds
            content:
              type: object
              properties:
                preview:
                  type: string
                summaryPreview:
                  type: string
                downloadUrl:
                  type: string
                  format: uri

    ExtractedTextResponse:
      type: object
      properties:
        documentId:
          type: string
          format: uuid
        page:
          type: integer
        totalPages:
          type: integer
        format:
          type: string
          enum: [plain, html, markdown]
        language:
          type: string
        content:
          type: string
        nextPageUrl:
          type: string
          format: uri
        previousPageUrl:
          type: string
          format: uri

    SummaryResponse:
      type: object
      properties:
        documentId:
          type: string
          format: uuid
        summary:
          type: string
        keyPoints:
          type: array
          items:
            type: string
        confidence:
          type: number
          format: float

    EntitiesResponse:
      type: object
      properties:
        documentId:
          type: string
          format: uuid
        entities:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              type:
                type: string
                enum: [PERSON, ORGANIZATION, LOCATION, DATE, PRODUCT, EVENT]
              confidence:
                type: number
                format: float
              page:
                type: integer
              position:
                type: object
                properties:
                  start:
                    type: integer
                  end:
                    type: integer
              metadata:
                type: object
                additionalProperties: true

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        itemsPerPage:
          type: integer
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
