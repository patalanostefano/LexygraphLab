openapi: 3.0.3
info:
  title: Document Service API
  description: API for document management in the LexygraphAI platform
  version: 1.0.0
  contact:
    name: LexygraphAI API Team
servers:
  - url: https://api.lexygraphai.com/api/v1
    description: Production server
  - url: http://localhost:8082/api/v1
    description: Local development

tags:
  - name: documents
    description: Document operations
  - name: collections
    description: Document collection operations

paths:
  /documents:
    post:
      summary: Upload a new document
      description: Upload a document file with metadata for processing
      operationId: uploadDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload (PDF, DOCX, JPG, PNG, etc.)
                metadata:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Contract Agreement"
                    description:
                      type: string
                      example: "Legal contract for client XYZ"
                    tags:
                      type: array
                      items:
                        type: string
                      example: ["contract", "legal", "agreement"]
                    collectionId:
                      type: string
                      format: uuid
                      example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '201':
          description: Document successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '413':
          description: File too large
          
    get:
      summary: List documents
      description: Get a list of documents with optional filtering
      operationId: listDocuments
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: tag
          in: query
          schema:
            type: string
          description: Filter by tag
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, PROCESSING, COMPLETED, FAILED]
          description: Filter by document status
        - name: collectionId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by collection ID
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Page size for pagination
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentSummary'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized

  /documents/{documentId}:
    get:
      summary: Get document details
      description: Retrieve detailed information about a document
      operationId: getDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '401':
          description: Unauthorized
        '404':
          description: Document not found

    delete:
      summary: Delete a document
      description: Remove a document and associated data
      operationId: deleteDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Document deleted
        '401':
          description: Unauthorized
        '404':
          description: Document not found

  /documents/{documentId}/content:
    get:
      summary: Download document content
      description: Download the original document file
      operationId: downloadDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '404':
          description: Document not found

  /documents/{documentId}/process:
    post:
      summary: Process a document
      description: Start processing a document with an agent or workflow
      operationId: processDocument
      tags:
        - documents
      security:
        - bearerAuth: []
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AgentProcessRequest'
                - $ref: '#/components/schemas/WorkflowProcessRequest'
      responses:
        '202':
          description: Processing initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessResponse'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Document not found

  /collections:
    post:
      summary: Create a document collection
      description: Create a new collection to organize documents
      operationId: createCollection
      tags:
        - collections
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '201':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
          
    get:
      summary: List collections
      description: Get a list of document collections
      operationId: listCollections
      tags:
        - collections
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Page size for pagination
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CollectionResponse'
                  page:
                    type: integer
                  size:
                    type: integer
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DocumentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        uploadDate:
          type: string
          format: date-time
        lastModifiedDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        mimeType:
          type: string
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED]
        tags:
          type: array
          items:
            type: string
        collectionId:
          type: string
          format: uuid
        processingResults:
          type: array
          items:
            $ref: '#/components/schemas/ProcessingSummary'

    DocumentSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        uploadDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        mimeType:
          type: string
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED]
        tags:
          type: array
          items:
            type: string
        collectionId:
          type: string
          format: uuid

    ProcessingSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        agentId:
          type: string
          format: uuid
        agentName:
          type: string
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED]
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        outputType:
          type: string

    AgentProcessRequest:
      type: object
      required:
        - type
        - agentId
      properties:
        type:
          type: string
          enum: [AGENT]
        agentId:
          type: string
          format: uuid
        parameters:
          type: object
          additionalProperties: true

    WorkflowProcessRequest:
      type: object
      required:
        - type
        - workflowId
      properties:
        type:
          type: string
          enum: [WORKFLOW]
        workflowId:
          type: string
          format: uuid
        parameters:
          type: object
          additionalProperties: true

    ProcessResponse:
      type: object
      properties:
        processId:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED]
        startTime:
          type: string
          format: date-time
        estimatedCompletionTime:
          type: string
          format: date-time
        statusCheckUrl:
          type: string
          format: uri

    CollectionRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500

    CollectionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        creationDate:
          type: string
          format: date-time
        documentCount:
          type: integer

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
